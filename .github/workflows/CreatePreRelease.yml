name: CreatePreRelease

on: 
  [workflow_dispatch]
  
jobs:
  unix_build_pymeshlab:
    name: Build PyMeshLab
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, macos-latest]
        pyversion: [3.8]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: checkout sub-submodule vcg
      run: |
        cd meshlab
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        modules: xmlpatterns
    - name: Install Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Install Ubuntu dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y mesa-common-dev libglu1-mesa-dev 
    - name: Environment variables
      id: envs
      run: |
        cd meshlab
        echo  ::set-output name=meshlab_commit::$(git rev-parse --short HEAD)
    - name: Cache MeshLab Build
      id: cache-meshlab-build
      uses: actions/cache@v2
      with:
        path: pymeshlab/lib
        key: ${{ runner.os }}-meshlab-${{steps.envs.outputs.meshlab_commit}}
    - name: Install MeshLab-Ubuntu dependencies
      if: steps.cache-meshlab-build.outputs.cache-hit != 'true' && runner.os == 'Linux'
      run: |
        sudo apt-get install -y libgmp-dev libxkbcommon-x11-0 patchelf
    - name: Install MeshLab-MacOS dependencies
      if: steps.cache-meshlab-build.outputs.cache-hit != 'true' && runner.os == 'macOS'
      run: |
        brew install libomp
    - name: Build MeshLab
      if: steps.cache-meshlab-build.outputs.cache-hit != 'true'
      run: |
        sh install/${{ runner.os }}/build_meshlab.sh
    - name: Build PyMeshLab ${{ matrix.pyversion }}
      run: |
        export PYTHON_VERSION=${{ matrix.pyversion }}
        sh install/${{ runner.os }}/build_pymeshlab.sh
    - name: Upload PyMeshLab_${{ runner.os }}_python${{ matrix.pyversion }}
      uses: actions/upload-artifact@v2
      with:
        name: PyMeshLab_${{ runner.os }}_python${{ matrix.pyversion }}
        path: pymeshlab/

  windows_build_pymeshlab:
    name: Build PyMeshLab (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        pyversion: [3.8]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: checkout sub-submodule vcg
      run: |
        cd meshlab
        $auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Downlaod Jom
      run: |
        Invoke-WebRequest -Uri "http://download.qt.io/official_releases/jom/jom_1_1_3.zip" -OutFile "jom_1_1_3.zip"
        New-Item -Name "jom" -ItemType "directory"
        Expand-Archive -Path jom_1_1_3.zip -DestinationPath .\jom
        echo "::add-path::$(Get-Location)\jom"
    - name: Setup env variables
      id: envs
      run: |
        echo '::set-env name=VCINSTALLDIR::C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
        cd meshlab
        $var=(git rev-parse --short HEAD --version) | Out-String
        echo "::set-output name=meshlab_commit::$($var)"
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        modules: xmlpatterns
        version: '5.14.2'
    - name: Install Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Cache MeshLab Build
      id: cache-meshlab-build
      uses: actions/cache@v2
      with:
        path: |
          pymeshlab/lib
          pymeshlab/Qt*.dll
        key: ${{ runner.os }}-meshlab-${{steps.envs.outputs.meshlab_commit}}
    - name: Build MeshLab
      if: steps.cache-meshlab-build.outputs.cache-hit != 'true'
      run: |
        .\install\${{ runner.os }}\build_meshlab.ps1
    - name: Build PyMeshLab
      run: |
        .\install\${{ runner.os }}\build_pymeshlab.ps1
    - name: Upload PyMeshLab_${{ runner.os }}_python${{ matrix.pyversion }}
      uses: actions/upload-artifact@v2
      with:
        name: PyMeshLab_${{ runner.os }}_python${{ matrix.pyversion }}
        path: pymeshlab/

  #after building PyMeshLab for the three platforms, we create a prerelease in github
  create_prerelease:
    name: Create PreRelease
    needs: [unix_build_pymeshlab, windows_build_pymeshlab]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v2
    - name: Get short_sha and version
      id: slug
      run: |
        echo  ::set-output name=short_sha::$(git rev-parse --short HEAD)
        echo  ::set-output name=version::"$(cat PYML_VERSION)"
    #Create prerelease and upload
    - name: Publish PreRelease
      id: create_prerelease
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.slug.outputs.version }}-${{ steps.slug.outputs.short_sha }}
        release_name: PyMeshLab_v${{ steps.slug.outputs.version }}-${{ steps.slug.outputs.short_sha }}
        draft: false
        prerelease: true
    
  #then, we will upload all the artifacts to the release
  upload_release:
    name: Upload Release
    needs: [create_prerelease]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Linux, macOS, Windows]
        pyversion: [3.8]
    steps:
    #download
    - name: Download PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}
      uses: actions/download-artifact@v1
      with:
        name: PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}
        path: pymeshlab/
    - name: Create PyMeshLab Archive
      run: |
        cd pymeshlab
        zip -r ../PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}.zip *
    #upload
    - name: Upload PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{needs.create_prerelease.outputs.upload_url}}
        asset_path: PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}.zip
        asset_name: PyMeshLab_${{ matrix.os }}_python${{ matrix.pyversion }}.zip
        asset_content_type: PyMeshLab ${{ matrix.pyversion }}
